@page "/movie/{movieId:int}"

@inject TMDBService tmdbService
@inject IJSRuntime JS 

@if(movieDetails is not null)
{
    <PageTitle>@movieDetails.Title</PageTitle>
}

<div class="container-fluid p-0">
    @if(movieDetails is null)
    {
        <div class="py-5 justify-content-center align-items-center"> 
            @if(isLoading)
            {
                <h2 class="text-muted">Loading movie details...</h2>
            }
            else
            {
                <h2 class="text-muted">The requested movie could not be found.</h2>

            }
        </div>
    }
    else
    {
        <div id="movie-details" style="--background: url(@movieDetails.BackdropPath)">
            <div id="movie-wrapper">
                <div class="container-xxl py-3">
                    <div class="row">
                        <div class="col-12 col-md-4 col-xl-3 text-center text-md-start mb-3">
                            <img class="img-fluid" id="movie-poster" alt="movie poster" src="@movieDetails.PosterPath" />
                        </div>
                        <div class="col-12 col-md-8 col-xl-9">
                            <h3 class="display-6 fw-bold mb-0">
                                @movieDetails.Title
                            </h3>
                            <div class="lead mb-3">
                                @movieDetails.Tagline
                            </div>
                            <div class="hstack gap-2">
                                @{
                                    bool dateParsed = DateTime.TryParse(movieDetails.ReleaseDate, out var releaseDate);
                                }

                                @if(dateParsed)
                                {
                                    <span>Release Date: @releaseDate.ToString("MMMM dd, yyyy") | </span>
                                }
                                <span>
                                    @{ 
                                        int hours = movieDetails.Runtime / 60;
                                        int minutes = movieDetails.Runtime % 60;
                                    }
                                    @hours hour(s) @minutes minutes
                                </span>
                            </div>
                            <div class="hstack gap-2 my-2">
                                @foreach(var genre in movieDetails.Genres) 
                                {
                                    <span class="badge text-bg-primary">@genre.Name</span>
                                }
                            </div>
                            <h5 class="lead fw-bold pt-3 mt-3">Overview</h5>
                            <p>@movieDetails.Overview</p>
                            <div>
                                <span id="movie-rating">
                                    User Score: @((movieDetails.VoteAverage * 10).ToString("F2"))%
                                </span>
                            </div>
                            @if(!string.IsNullOrEmpty(movieTrailer?.Key))
                            {
                                <div id="btn-trailer" class="mt-3">
                                    <button class="btn btn-outline-warning"
                                            data-bs-toggle="modal" 
                                            data-bs-target="#movie-modal">
                                        <i class="bi bi-play"></i>Play Trailer
                                        </button>
                                </div>
                            }
                        </div>
                    </div>

                </div>

            </div>
        </div>
    }
</div>

<div class="modal" tabindex="-1" id="movie-modal">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content modal-background">
            <div class="modal-header">
                <h5 class="modal-title" id="modal-title">@(movieDetails?.Title ?? "Movie Trailer")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="ratio ratio-16x9">
                    <iframe id="modal-trailer" src="" allowfullscreen>

                    </iframe>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-warning ms-auto" data-bs-dismiss="modal">
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int MovieId { get; set; }
    bool isLoading = true;

    private MovieDetails? movieDetails;
    private Video? movieTrailer;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            isLoading = true;
            movieDetails = await tmdbService.GetMovieById(MovieId);
            movieTrailer = await tmdbService.GetMovieTrailer(MovieId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading movie details: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await using var jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/MovieById.razor.js");

        if (movieTrailer is not null)
        {
            string trailerUrl = $"https://www.youtube.com/embed/{movieTrailer.Key}";
            await jsModule.InvokeVoidAsync("initVideoPlayer", trailerUrl);
        }
        else
        {
            await jsModule.InvokeVoidAsync("initVideoPlayer", string.Empty);
        }

    }
}
